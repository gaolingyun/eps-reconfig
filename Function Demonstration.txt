Function Demonstration
======================


sensor_measurement(G, uncon_comp_tups, contactor_tups, states)
----------------------
This function returns the measurements of all the sensors using a dictionary data structure, for 
example, {'S2': 1, 'S1': 0}. ¡°'S1': 0¡± means sensor 1 displays ¡°unhealthy¡±. ¡°'S2': 1¡± means 
sensor 2 displays ¡°healthy¡±. The inputs include G, uncontrollable component tuples, contactor 
tuples, and the given state. G is the given circuit. Uncontrollable component tuples and contactor 
tuples are given using the function init(G, uncon_comp_tups, contactor_tups). State consists of 
the performing action (controllable contactors being open or closed) and states of the rest 
components. The example input states can be states = {'G1': 1, 'G2': 0, 'T1': 0, 'T2': 0, 'C1': 1, 
'C2': 1, 'C3': 1, 'C4': 0, 'C5': 0, 'C6': 0}. ¡°'C1': 1¡± means contactor 1 is closed. ¡°'C4': 0¡± 
means contactor 4 is open. ¡°'G1': 1¡± means generator 1 is healthy. ¡°'G2': 0¡± means generator 
2 is unhealthy.

This function gives the measurements by checking all the paths between each sensor and each 
generator. Choosing one path, if any contactor along the path is open, then this is not a live 
path, so there is no need to check the states of the rest components. If all the contactors are 
closed, then the states of the rest components will be checked. If any component is unhealthy then 
the sensor will display ¡°unhealthy¡±. Otherwise, it is healthy.


compatible_states(G, sensor_readings, con_cont, file_name)
----------------------
This function creates a csv file storing the database of the compatible states given the outcomes 
of the sensors and the same set of actions. The inputs include the given circuit G, the sensor 
readings using a dictionary data structure (S_readings = {'S1': 0, 'S2': 0}), the states of the 
controllable contactors (C_c = {'C1': 1, 'C2': 1, 'C3': 1}), and the output file name.

This function checks all of the states of the controllable components, and by using the function 
¡°sensor_measurement¡±, it gets the sensor readings. Comparing it with the actual sensor readings, 
if they are the same, the state will be added to the compatible states.
